/*!
 * braintree-validation v1.0.0
 *
 * https://github.com/nb1987/braintree-validation
 *
 * Copyright (c) 2017 Nick Bagnall
 * Released under the MIT license
 */
 (function(e,r){if(typeof define==="function"&&define.amd){define(["hosted-fields","jquery.validate"],r)}else if(typeof module==="object"&&module.exports){module.exports=r(require("braintree-web/hosted-fields"),require("jquery-validation"))}else{r(e.braintree.hostedFields,e.jQuery)}})(this,function(e,r){var i;function t(e){if(i===undefined){console.error("You cannot call getFieldNameFromFrameElement() without first calling validate() on the braintree.hostedFields!");return}for(field in i._fields){if(i._fields[field].frameElement===e){return field}}}e.getFieldNameFromFrameElement=t;function n(e){if(i===undefined){console.error("You cannot call getFieldFromFrameElement() without first calling validate() on the braintree.hostedFields!");return}return i._state.fields[t(e)]}e.getFieldFromFrameElement=n;e.rules=function(e,t){if(i===undefined){console.error("You cannot call rules() without first calling validate() on the braintree.hostedFields!");return}var n=r(i._fields[Object.keys(i._fields)[0]].containerElement).closest("form");if(e){switch(e){case"add":r(n).rules("add",t);break;case"remove":return r(n).rules("remove",t)}return}else{return r(n).rules()}};e.valid=function(){if(i===undefined){console.error("You cannot call valid() without first calling validate() on the braintree.hostedFields!");return}var e=r(i._fields[Object.keys(i._fields)[0]].containerElement).closest("form");return r(e).valid()};e.validate=function(e,o){if(typeof r==="undefined"){console.error("No jQuery object is defined!");return}if(typeof r.validator==="undefined"){console.error("jQuery Validation plugin not found!");return}if(!e._fields){console.error("hostedFieldsInstance._fields has no value!");return}i=e;var a=r(e._fields[Object.keys(e._fields)[0]].containerElement).closest("form"),l=o&&o.rules||{},u=o&&o.messages||{},s={focus:function(){return new FocusEvent("focus",{bubbles:true,cancelable:true})},blur:function(){return new FocusEvent("blur",{bubbles:true,cancelable:true})},inputSubmitRequest:function(){return new Event("submit",{bubbles:true,cancelable:true})},empty:function(){return new Event("keyup",{bubbles:true,cancelable:true,key:"Q"})},notEmpty:function(){return new Event("keyup",{bubbles:true,cancelable:true,key:"Q"})},cardTypeChange:function(){return new Event("keyup",{bubbles:true,cancelable:true,key:"Q"})},validityChange:function(){return new Event("keyup",{bubbles:true,cancelable:true,key:"Q"})}},d={number:"card number",cvv:"CVV",expirationMonth:"expiration month",expirationYear:"expiration year",postalCode:"postal code"};for(field in e._fields){var f=r(e._fields[field].frameElement),c=r(f).attr("name");f.attr("contenteditable",true);r.validator.addMethod(c+"-isRequired",function(e,r){return!n(r).isEmpty});r.validator.addMethod(c+"-isValid",function(e,r){return n(r).isValid});if(c in l){if(o.debug)console.warn("You are overriding braintree-validation's default validation rules for the "+d[field]+". Please refer to the library's GitHub documentation if you have not already done so.")}else{l[c]={};l[c][c+"-isRequired"]=true;l[c][c+"-isValid"]=true}if(c in u){if(o.debug)console.warn("You are overriding braintree-validation's default error messages for the "+d[field]+". Please refer to the library's GitHub documentation if you have not already done so.")}else{u[c]={};u[c][c+"-isRequired"]=d[field].charAt(0).toUpperCase()+d[field].slice(1)+" is required.";u[c][c+"-isValid"]="Please enter a valid "+d[field]+"."}}if(o.onfocusout===false){delete s["blur"]}if(o.onkeyup===false){delete s["empty"];delete s["notEmpty"];delete s["validityChange"];delete s["cardTypeChange"]}for(braintreeEvent in s){(function(i){e.on(i,function(e){if(i==="inputSubmitRequest"){r(e.fields[e.emittedBy].container).closest("form")[0].dispatchEvent(s[i]())}else{r(e.fields[e.emittedBy].container).children("iframe")[0].dispatchEvent(s[i]())}})})(braintreeEvent)}o.rules=l;o.messages=u;if(!o.errorPlacement){o.errorPlacement=function(e,r){if(t(r[0])!==undefined){e.insertAfter(r.parent())}else{e.insertAfter(r)}}}else if(o.debug){console.warn("You are overriding braintree-validation's default implementation of errorPlacement(). Please refer to the library's GitHub documentation if you have not already done so.")}var b=a.validate(o);var m=b.settings.highlight,h=b.settings.unhighlight,v=r.validator.methods.required;if(o.ignore&&typeof o.ignore==="string"&&o.ignore.match(/iframe/gi)){if(o.debug)console.warn("iframe is being expunged from the options.ignore string.");b.settings.ignore=o.ignore.replace(/iframe/gi,"")}if(!o.highlight){b.settings.highlight=function(r,i,n){var a=t(r);if(a!==undefined){e.addClass(a,i,function(e){if(o.debug&&e)console.error(e)});e.removeClass(a,n,function(e){if(o.debug&&e)console.error(e)})}else{m(r,i,n)}}}else if(o.debug){console.warn("You are overriding braintree-validation's default implementation of highlight(). Please refer to the library's GitHub documentation if you have not already done so.")}if(!o.unhighlight){b.settings.unhighlight=function(r,i,n){if(t(r)!==undefined){e.removeClass(t(r),i,function(e){if(o.debug&&e)console.error(e)});e.addClass(t(r),n,function(e){if(o.debug&&e)console.error(e)})}else{h(r,i,n)}}}else if(o.debug){console.warn("You are overriding braintree-validation's default implementation of unhighlight(). Please refer to the library's GitHub documentation if you have not already done so.")}r.validator.addMethod("required",function(e,r,i){var t=n(r);if(t!==undefined){return!t.isEmpty}else{return v.call(b,e,r,i)}});var g=r.expr.pseudos.blank;r.expr.pseudos.blank=function(e){var r=n(e);if(r!==undefined){return r.isEmpty}return g(e)};var y=r.expr.pseudos.filled;r.expr.pseudos.filled=function(e){var r=n(e);if(r!==undefined){return!r.isEmpty}return y(e)};return b};return e});